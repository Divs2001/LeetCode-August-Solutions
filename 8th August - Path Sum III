/*You are given a binary tree in which each node contains an integer value.

Find the number of paths that sum to a given value.

The path does not need to start or end at the root or a leaf, but it must go downwards (traveling only from parent nodes to child nodes).

The tree has no more than 1,000 nodes and the values are in the range -1,000,000 to 1,000,000.*/

//Solution - 

class Solution {
    int count = 0;

    public int pathSum(TreeNode root, int sum) {
        Map<Integer, Integer> map = new HashMap();
        map.put(0, 1);
        helper(root, 0, sum, map);
        return count;
    }

    private void helper(TreeNode root, int currSum, int target, Map<Integer, Integer> map) {
        if (root == null)
            return;
        
		currSum += root.val;
        
		if (map.containsKey(currSum - target))
            count += map.get(currSum - target);
        
		map.put(currSum, map.getOrDefault(currSum, 0) + 1);
        helper(root.left, currSum, target, map);
        helper(root.right, currSum, target, map);
        map.put(currSum, map.get(currSum) - 1);
    }
}
